{"data":{"allMarkdownRemark":{"totalCount":16,"nodes":[{"id":"6729d198-e28e-52fc-ad06-5a51c09a1648","frontmatter":{"date":"January 02, 2021","draft":null,"tags":null,"title":"Lensmaker"},"excerpt":"<p><a href=\"https://www.codewars.com/kata/54258ffb430ca2e4b5000239/train/haskell\">https://www.codewars.com/kata/54258ffb430ca2e4b5000239/train/haskell</a></p>\n<p><a href=\"https://news.ycombinator.com/item?id=8618925\">https://news.ycombinator.com/item?id=8618925</a></p>\n<p>TODO: ...</p>"},{"id":"792ab452-4aee-5902-9534-b49b8b8afd96","frontmatter":{"date":"August 21, 2020","draft":null,"tags":null,"title":"csapp bomb wripteup"},"excerpt":"<p>只是很粗糙的日志</p>\n<h2>phase 2</h2>\n<h3><code class=\"language-text\">read_six_numbers(char*,?)</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"assemble\"><pre class=\"language-assemble\"><code class=\"language-assemble\">0x000000000040145c &lt;+0&gt;:     sub    $0x18,%rsp\n0x0000000000401460 &lt;+4&gt;:     mov    %rsi,%rdx\n0x0000000000401463 &lt;+7&gt;:     lea    0x4(%rsi),%rcx\n0x0000000000401467 &lt;+11&gt;:    lea    0x14(%rsi),%rax\n0x000000000040146b &lt;+15&gt;:    mov    %rax,0x8(%rsp)\n0x0000000000401470 &lt;+20&gt;:    lea    0x10(%rsi),%rax\n0x0000000000401474 &lt;+24&gt;:    mov    %rax,(%rsp)\n0x0000000000401478 &lt;+28&gt;:    lea    0xc(%rsi),%r9\n0x000000000040147c &lt;+32&gt;:    lea    0x8(%rsi),%r8\n0x0000000000401480 &lt;+36&gt;:    mov    $0x4025c3,%esi\n0x0000000000401485 &lt;+41&gt;:    mov    $0x0,%eax\n0x000000000040148a &lt;+46&gt;:    callq  0x400bf0 &lt;__isoc99_sscanf@plt&gt;\n0x000000000040148f &lt;+51&gt;:    cmp    $0x5,%eax\n0x0000000000401492 &lt;+54&gt;:    jg     0x401499 &lt;read_six_numbers+61&gt;\n0x0000000000401494 &lt;+56&gt;:    callq  0x40143a &lt;explode_bomb&gt;\n0x0000000000401499 &lt;+61&gt;:    add    $0x18,%rsp\n0x000000000040149d &lt;+65&gt;:    retq</code></pre></div>\n<h3><code class=\"language-text\">phase2(char*)</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"assemble\"><pre class=\"language-assemble\"><code class=\"language-assemble\">0x0000000000400efc &lt;+0&gt;:     push   %rbp\n0x0000000000400efd &lt;+1&gt;:     push   %rbx\n0x0000000000400efe &lt;+2&gt;:     sub    $0x28,%rsp\n0x0000000000400f02 &lt;+6&gt;:     mov    %rsp,%rsi\n0x0000000000400f05 &lt;+9&gt;:     callq  0x40145c &lt;read_six_numbers&gt;\n0x0000000000400f0a &lt;+14&gt;:    cmpl   $0x1,(%rsp)\n0x0000000000400f0e &lt;+18&gt;:    je     0x400f30 &lt;phase_2+52&gt;\n0x0000000000400f10 &lt;+20&gt;:    callq  0x40143a &lt;explode_bomb&gt;\n0x0000000000400f15 &lt;+25&gt;:    jmp    0x400f30 &lt;phase_2+52&gt;\n0x0000000000400f17 &lt;+27&gt;:    mov    -0x4(%rbx),%eax\n0x0000000000400f1a &lt;+30&gt;:    add    %eax,%eax\n0x0000000000400f1c &lt;+32&gt;:    cmp    %eax,(%rbx)\n0x0000000000400f1e &lt;+34&gt;:    je     0x400f25 &lt;phase_2+41&gt;\n0x0000000000400f20 &lt;+36&gt;:    callq  0x40143a &lt;explode_bomb&gt;\n0x0000000000400f25 &lt;+41&gt;:    add    $0x4,%rbx\n0x0000000000400f29 &lt;+45&gt;:    cmp    %rbp,%rbx\n0x0000000000400f2c &lt;+48&gt;:    jne    0x400f17 &lt;phase_2+27&gt;\n0x0000000000400f2e &lt;+50&gt;:    jmp    0x400f3c &lt;phase_2+64&gt;\n0x0000000000400f30 &lt;+52&gt;:    lea    0x4(%rsp),%rbx\n0x0000000000400f35 &lt;+57&gt;:    lea    0x18(%rsp),%rbp\n0x0000000000400f3a &lt;+62&gt;:    jmp    0x400f17 &lt;phase_2+27&gt;\n0x0000000000400f3c &lt;+64&gt;:    add    $0x28,%rsp\n0x0000000000400f40 &lt;+68&gt;:    pop    %rbx\n0x0000000000400f41 &lt;+69&gt;:    pop    %rbp\n0x0000000000400f42 &lt;+70&gt;:    retq</code></pre></div>\n<h3>sixty registers</h3>\n<p>six argument register</p>\n<ol>\n<li>rdi</li>\n<li>rsi</li>\n<li>rdx</li>\n<li>rcx</li>\n<li>r8</li>\n<li>r9</li>\n<li>rax: return value</li>\n<li>rbx: callee saved</li>\n<li>rbp: base reg; callee saved</li>\n<li>rsp: stack ptr</li>\n<li>r10-11: temporary reg</li>\n<li>…</li></ol>"},{"id":"f4601566-d342-5c26-9d74-4ec686a9c0fa","frontmatter":{"date":"June 04, 2020","draft":null,"tags":null,"title":"前端方向的面试经历2"},"excerpt":"<p>记录一次前端方向的面试经历（其实是第三次，其实很多问题都重叠了，但我还是答不上来）。</p>\n<ol>\n<li>\n<p>JavaScript 原型链， <code class=\"language-text\">__proto__</code> 关键字</p>\n<p>答：眼熟 <code class=\"language-text\">__proto__</code>，但我不知什么意思（大意）。</p>\n<hr>\n<p>对象的原型对应 <code class=\"language-text\">__proto__</code> ，函数的原型对应 <code class=\"language-text\">prototype</code></p>\n<p>肤浅的证明：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbar<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">继承与原型链</a></p>\n<p><code class=\"language-text\">__proto__</code> 不是 JS 的标准属性，但却是事实标准。</p>\n<p>标准的方式是用 <code class=\"language-text\">Object.getPrototypeOf(obj)</code> 和 <code class=\"language-text\">Object.setPrototypeOf(obj)</code> 。不过据说性能反而会降低？</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\">…</a></p></li></ol>"},{"id":"3310d9c7-112d-5203-95c9-3c98387a6a0d","frontmatter":{"date":"March 21, 2020","draft":true,"tags":null,"title":"Speed Up Blog"},"excerpt":"<p>最近逛了<a href=\"https://nova.moe\">Nova 的 blog</a>, 被这个速度惊呆了! 相比之下,我这博客就有点蜗牛的感觉. 而且图片的路径还是错的? 所以我想要优化我博客的速度, 但是我想,我得先把图片的问题解决掉.</p>\n<p>图片在我本地是可以正常显示的,但是传到 github 上之后, 相对路径(../assert/image/*)让它们都显示不出来. 我首先是想到用图床,但是免费的图床都各有各的限制, 比如 10M 以下,一年 120 次上传, imgur…</p>"},{"id":"db1bc8f8-94fc-56fe-bb72-e939aadf77c4","frontmatter":{"date":"March 13, 2020","draft":null,"tags":null,"title":"Graphic's Magic"},"excerpt":"<h2>Computer Graphics' s Magic</h2>\n<p>本来还有计算机网络和机器视觉的一些事情要做，但是我很抗拒，游戏也不好玩了（或者没什么心情玩），所以来学习计算机图形学的魔法？（其实是填一个坑）</p>\n<p>我的魔法之路就决定从<a href=\"https://github.com/ssloy/tinyrenderer/wiki/Lesson-0-getting-started\">这里</a>开始了。</p>\n<p>一个小问题，生成的 tga 格式的图片，kde…</p>"},{"id":"ddee91b4-a6bc-5ef5-bbb6-cc8921ae0396","frontmatter":{"date":"March 03, 2020","draft":null,"tags":null,"title":"GalGame 美少女万华镜解包记录"},"excerpt":"<h3>一篇可能没什么帮助的美少女万华镜 4 解包记录</h3>\n<p>一开始，只知道搜索 [Galgame, unpack, 美少女万华镜, 解包] -></p>\n<p>通过 ZTJ 的 GalGame 解包记录，了解到 asmodean 的 exfp3 可以解包这个游戏，然而这个 exfp…</p>"},{"id":"6286e049-c409-5fee-878e-5fbc76a20ae8","frontmatter":{"date":"February 26, 2020","draft":null,"tags":null,"title":"Network"},"excerpt":"<blockquote>\n<p>是作业</p>\n</blockquote>\n<h2>1. 3 种网络</h2>\n<p><strong>电信网络</strong>、<strong>有线电视网络</strong>和<strong>计算机网络</strong>。</p>\n<p><strong>电信网络</strong>向用户提供电话、电报及传真等服务; <strong>有线电视网络</strong>向用户传送各种电视节目; <strong>计算机网络</strong>则使用户能够在计算机之间传送数据文件。</p>\n<h2>2. 互联网 2 个基本特点，2 个子网</h2>\n<p><strong>连通性</strong>和<strong>共享</strong>：</p>\n<p>所谓<strong>连通性(</strong>…</p>"},{"id":"c4d0977b-2e84-5358-b705-1ad1b4738e13","frontmatter":{"date":"October 07, 2019","draft":null,"tags":null,"title":"SICP Note"},"excerpt":"<h2>应用序与正则序</h2>\n<ul>\n<li>应用序： 先对过程的参数进行求值，然后将值作用到这个过程</li>\n<li>正则序： 先将过程进行展开，用实参代换形参，再进行求值</li>\n</ul>\n<p>举个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">add1</span> x y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果求值 <code class=\"language-text\">(add1 (+ 1 2) (* 2 3))</code></p>\n<p>应用序的话：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">add1</span> <span class=\"token number\">3</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">9</span></code></pre></div>\n<p>如果是正则序：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">9</span></code></pre></div>\n<p>很明显正则序常常会有重复求值的问题，只要形参在过程中出现了多次，比如 <code class=\"language-text\">(define (square x) (* x x))</code>…</p>"},{"id":"48f5b688-3bd5-5ca1-9f9a-43ca0639ddf3","frontmatter":{"date":"October 05, 2019","draft":null,"tags":null,"title":"Percolation"},"excerpt":"<p><code class=\"language-text\">isOpen</code> whether or not that space has been excavated(挖掘，变成空洞)</p>\n<p><code class=\"language-text\">isFull</code> has water reached it from the top.</p>\n<p>所以明白了这两个方法的作用就可以完成下面这个</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Percolation</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Percolation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numberOfOpenSites</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">percolates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>后面都没什么难度</p>\n<h3>这是 Percolation…</h3>"},{"id":"355a103f-219b-5d76-9ebc-6b9333e11fe4","frontmatter":{"date":"October 01, 2019","draft":null,"tags":null,"title":"Java Integer 的缓存机制"},"excerpt":"<p>做 cs61b 的 lab3 时碰到的，需要解释</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSameNumber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>用这个判断 0-499 的两个一样的 int 时，为什么到 128 就是 false 了，我觉得我这解释还可以。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntegerCache</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cache<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> archivedCache<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> integerCacheHighPropValue <span class=\"token operator\">=</span> VM<span class=\"token punctuation\">.</span><span class=\"token function\">getSavedProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Integer.IntegerCache.high\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>integerCacheHighPropValue <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                h <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>integerCacheHighPropValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                h <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">2147483518</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> var6<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        high <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n        VM<span class=\"token punctuation\">.</span><span class=\"token function\">initializeFromArchive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer<span class=\"token punctuation\">.</span>IntegerCache</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> high <span class=\"token operator\">-</span> <span class=\"token operator\">-</span><span class=\"token number\">128</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>archivedCache <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> size <span class=\"token operator\">></span> archivedCache<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            archivedCache <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        cache <span class=\"token operator\">=</span> archivedCache<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">assert</span> high <span class=\"token operator\">>=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> i <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span><span class=\"token number\">128</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Integer<span class=\"token punctuation\">.</span>IntegerCache</span><span class=\"token punctuation\">.</span>high <span class=\"token operator\">?</span> <span class=\"token class-name\">Integer<span class=\"token punctuation\">.</span>IntegerCache</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">128</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>从上面这几段代码来看, Integer 确实是有一个缓存的机制,所以：</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi mathvariant=\"normal\">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>O</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>=</mo><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>g</mi><mi>e</mi><mi>r</mi><mi mathvariant=\"normal\">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>O</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mspace linebreak=\"newline\"></mspace><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo separator=\"true\">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mo>−</mo><mn>128</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi><mo separator=\"true\">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>x</mi><mo>≤</mo><mo>−</mo><mn>128</mn><mtext> or </mtext><mi>x</mi><mo>≥</mo><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">Integer.valueOf(x) == Integer.valueOf(x) =\\\\\n\\begin{cases}\n    true, &amp;\\text{if } -128 \\leq x \\leq high\\\\\n    false,&amp;\\text{if } x \\leq -128 \\text{ or } x \\geq high\\\\\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">e</span><span class=\"mpunct\">,</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mpunct\">,</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord text\"><span class=\"mord\"> or </span></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<p>high 在大多时候都等于 12…</p>"},{"id":"de48a87f-d832-53a8-b94a-f554c1f70341","frontmatter":{"date":"August 28, 2019","draft":null,"tags":null,"title":"ISLR Note"},"excerpt":"<h2>对回归或者分类问题使用灵活度高的方法的优缺点</h2>\n<p>灵活度高的方法可解释性低，但是对数据的拟合更好，但过多的参数也会带来过拟合的问题，所以对于比较简单的模型可能效果还不如灵活度低的方法。</p>\n<h2>可解释性</h2>\n<p>对于线性模型，它非常可解释，因为很容易理解 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mtext>，</mtext><msub><mi>X</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_1，X_2,...,X_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 之间的关系。</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><msub><mi>θ</mi><mi>i</mi></msub><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Y = \\sum_{i=1}^p \\theta_i X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9761740000000003em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6985050000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.347113em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>\n<p>但是对于灵活度高的方法，就很难理解每个独立的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>…</p>"},{"id":"65184fdd-029d-581b-98cd-3a7aa4413326","frontmatter":{"date":"June 05, 2019","draft":null,"tags":null,"title":"使用 FBX SDK 碰到的问题"},"excerpt":"<p>昨天由于要写一个关于 Direct3D 的东东，这个过程中就碰到关于模型的问题。\n虽然这次只用到一些简单的模型，但是我还是想通过加载模型文件的方式。然后的话，由于没有 maya， 3ds max 这样的专业软件，这时我又想起来了 windows 上的 3D…</p>"},{"id":"4ffd92a9-45d1-5296-9d86-9a5ee58ba3c7","frontmatter":{"date":"April 21, 2019","draft":null,"tags":null,"title":"Linux Problems"},"excerpt":"<p>记录一下遇到的几个问题。</p>\n<h2>Grub</h2>\n<h3>多系统启动项</h3>\n<p>在以前用过的 ubuntu deepin 之类的发行版中通过执行 <code class=\"language-text\">sudo update-grub</code> 就可以自动扫描并添加其他已经安装的系统的启动项，而这在 arch 上需要额外的步骤 。</p>\n<ol>\n<li>如果只安装了 grub 和 efibootmgr , 那么 <code class=\"language-text\">update-grub</code> 这个命令并不存在 。实际上<code class=\"language-text\">sudo update-grub</code> 等价于 <code class=\"language-text\">sudo grub-mkconfig -o /boot/grub/grub.cfg</code> 或者也可以 安装 <code class=\"language-text\">update-grub</code> 这个 aur 包（虽然咱没试过</li>\n<li>这时发现， 并不能自动探测到其他系统的引导文件 ， 通过在 <a href=\"https://wiki.archlinux.org/\">arch wiki</a> 上搜索 grub ，找到了这里 <a href=\"https://wiki.archlinux.org/index.php/GRUB#Detecting_other_operating_systems\">GRUB#Detecting<em>other</em>operating_systems</a>…<code class=\"language-text\">sudo grub-mkconfig -o /boot/grub/grub.cfg</code></li></ol>"},{"id":"a848baeb-f467-50fa-8be2-0cf26ef0e395","frontmatter":{"date":"March 23, 2019","draft":null,"tags":null,"title":"Setup Kvm"},"excerpt":"<h2>1. 安装必需的包</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> pacman -Syu\n<span class=\"token function\">sudo</span> pacman -S qemu libvirt dmidecode bridge-utils openbsd-netcat ebtables dnsmasq</code></pre></div>\n<p>然后启动 <code class=\"language-text\">libvirtd</code> 服务</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> --now libvirtd</code></pre></div>\n<h2>2. 一个问题</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">network <span class=\"token string\">'default'</span> is not active</code></pre></div>\n<p>那么把他启动就行了</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">virsh</span> net-start default</code></pre></div>\n<p>自动启动</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">virsh</span> net-autostart default</code></pre></div>\n<p><strong>可选的功能:</strong></p>\n<h3>1. 使用 <code class=\"language-text\">Virtio</code> 进行半虚拟化（Para-virtualization with Virtio）</h3>\n<ul>\n<li>检测核心是否支持 <code class=\"language-text\">VIRTIO</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">zgrep VIRTIO /proc/config.gz</code></pre></div>\n<p>如果支持的话，所有的选项应该都为 <code class=\"language-text\">y</code> 或者 <code class=\"language-text\">m</code>…</p>"},{"id":"583fe943-bb1b-51a1-864a-de58642f9a0a","frontmatter":{"date":"March 22, 2019","draft":null,"tags":["linux"],"title":"ArchLinux's Nvidia Intel Graphics Cards Setup"},"excerpt":"<h2>附加</h2>\n<p>现在似乎不用 optimus-manager 也可以，如果直接安装 nvidia 和 gnome 的话，猜测是 gnome 对 xorg.conf 进行了配置？而且在 Wayland 下也能正常工作，但是需要安装整个 gnome group。</p>\n<p>记得上次没有装全，X1…<code class=\"language-text\">optimus-manager</code></p>"},{"id":"bbe8c05b-d5d9-5b7a-b46c-c0294ddb00c3","frontmatter":{"date":"February 12, 2019","draft":null,"tags":null,"title":"Build Emacs"},"excerpt":"<h2>Install some required packages</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y build-essential libncurses-dev</code></pre></div>\n<h2>if need graphics UI</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y libgtk-3-dev libxpm-dev libjpeg-dev libgif-dev libtiff-dev libgnutls28-dev</code></pre></div>\n<h2>Download source and unpack it</h2>\n<p>可以到<a href=\"https://www.gnu.org/savannah-checkouts/gnu/emacs/emacs.html#Releases\">这里</a>查看最新版本号</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> https://mirrors.tuna.tsinghua.edu.cn/gnu/emacs/emacs-26.3.tar.xz -O emacs.tar.xz\n<span class=\"token function\">tar</span> xf emacs.tar.xz</code></pre></div>\n<h2>Generate makefile and then build it</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> emacs\n./configure\n<span class=\"token function\">make</span> -j <span class=\"token number\">4</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<blockquote>\n<p>You can find some flag in INSTALL file to generate custome make file.</p>…</blockquote>"}]}}}