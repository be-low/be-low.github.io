{"componentChunkName":"component---src-components-post-jsx","path":"/post/Graphic's Magic","result":{"data":{"markdownRemark":{"id":"db1bc8f8-94fc-56fe-bb72-e939aadf77c4","frontmatter":{"date":"March 13, 2020","draft":null,"tags":null,"title":"Graphic's Magic"},"html":"<h2>Computer Graphics' s Magic</h2>\n<p>本来还有计算机网络和机器视觉的一些事情要做，但是我很抗拒，游戏也不好玩了（或者没什么心情玩），所以来学习计算机图形学的魔法？（其实是填一个坑）</p>\n<p>我的魔法之路就决定从<a href=\"https://github.com/ssloy/tinyrenderer/wiki/Lesson-0-getting-started\">这里</a>开始了。</p>\n<p>一个小问题，生成的 tga 格式的图片，kde 的默认图片查看器根本不支持，Clion 里也打不开，不过可以用 gimp 打开（虽然怪怪的）。</p>\n<h3>第一步，画直线</h3>\n<p>突然想起来我并不说没有学过这啊，当时还是用的 windows gdi， 在窗口绘制。现在已经忘得差不多了，而且我也没怎么听讲（上课无聊到想睡觉），老师也不可爱，反正总是有理由喏。那么就当没学过好了。</p>\n<p>看完了 <code class=\"language-text\">Bresenham’s Line Drawing Algorithm</code> 但我还是不是很懂。而且还很累。也许它更适合作为一个参考吧，照着来还是不合适，也不方便，所以我决定按自己的想法来。</p>\n<p>不如它为了不依赖任何库而选择 tga 格式，我就不太认同。因为太不通用，所以我决定用 <code class=\"language-text\">libpng</code> 用 Clion 作为 IDE，这样就能直接在 IDE 里查看输出的文件了。</p>\n<p>说实话，在浏览器里看这种 txt 文档，体验极差，而且 firefox 的阅读模式也不能开。所以其实更推荐用 <code class=\"language-text\">man libpng</code> 的方式，在终端模拟器里看。</p>\n<p>这文档也太长了吧，懒得看了()。咱明明只是想知道怎么 new 一个 X*Y 大小的画布，然后知道怎么在 (x,y) 点设置某个颜色值，然后怎么保存它为一个 png 格式的文件而已啊。不知道怎么搜索到了 <code class=\"language-text\">Beyond Linux® From Scratch (System V Edition)</code> 想起来这也是我以前挖的大坑。不对，以前那个是 LFS 这是 BLFS，嗯，更大的坑。大意就是教你怎么构建自己的 linux 发行版，完全自定义的 linux。不过也不能完全随心所欲，因为软件之间总有各种依赖，感觉是很麻烦的事情。</p>\n<p>又忘了 cmake 是怎么链接没有提供 <code class=\"language-text\">.cmake</code> 文件的库了，不过至少记得是用的 <code class=\"language-text\">.pc</code>。比上次更快的找到了方法。咱需要先 <code class=\"language-text\">find_package(PkgConfig)</code> 然后用 <code class=\"language-text\">pkg_check_modules()</code> 或者 <code class=\"language-text\">pkg_search_module</code>。像这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>PkgConfig REQUIRED<span class=\"token punctuation\">)</span>\n<span class=\"token function\">pkg_check_modules</span><span class=\"token punctuation\">(</span>PNG REQUIRED libpng<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>tinyrenderer\n        <span class=\"token punctuation\">${</span>PNG_LIBRARIES<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>然后, <code class=\"language-text\">pkg_check_modules</code> 和 <code class=\"language-text\">pkg_search_module</code> 有一点不同，首先它们都可以同时查找多个库，比如</p>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token function\">pkg_check_modules</span> <span class=\"token punctuation\">(</span>FOO glib-<span class=\"token number\">2.0</span><span class=\"token punctuation\">></span>=<span class=\"token number\">2.10</span> gtk+-<span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Looks for both glib2-2.0 (at least version 2.10) and any version of gtk2+-2.0. Only if both are found will FOO be considered found. The FOO<em>glib-2.0</em>VERSION and FOO<em>gtk+-2.0</em>VERSION variables will be set to their respective found module versions.</p>\n<p><code class=\"language-text\">pkg_search_module</code></p>\n<p>The behavior of this command is the same as pkg<em>check</em>modules(), except that rather than checking for all the specified modules, it searches for just the first successful match.</p>\n<p>懒得写了，这就是文档里复制过来的。</p>\n<p>wsl，这库真劝退。基本上就把 png 的底层都暴露出来了，用它的时候，你看到的 png 而不是 image。很烦的。\n决定用叶大的 svpng。</p>\n<p>测试图:</p>\n<p><img src=\"https://raw.githubusercontent.com/iovw/image-storage/master/images/svpng-out.webp\" alt=\"svpng test picture\"></p>\n<p>终于到了画直线的时候了(悲。</p>\n<p>还是困难重重，很多抽象都还没有，比如点，颜色，Matrix, 算了都写一遍好了。</p>\n<p>我 C++ 好菜啊，用 C++ 时就很多问题。比如用 <code class=\"language-text\">template&lt;typename T&gt;</code> 时，我应该怎么调用 T 的方法，应该把它强制转换成某个类型吗？我怎么对 T 进行限制，比如让它只能为某个类的子类(或者实现了某接口？，好吧，好像 C++ 没有接口)。</p>\n<p>可怕的是我还不知道该搜索什么关键词？也许这就是菜吧。只记得一个 <code class=\"language-text\">C++模板元编程</code> 的概念，如果组合 C++ 和模板的话。找到一个叫 <code class=\"language-text\">type_trait</code> 的东西，应该可以做这些检测，但是没有 <code class=\"language-text\">extend</code> 或者 <code class=\"language-text\">implement</code>.</p>\n<blockquote>\n<p>这篇记录应该可以帮我记住这个状态吧，因为要递归调用了，先把状态保存起来，才不会 <code class=\"language-text\">StackOverflow</code>.</p>\n</blockquote>\n<p>很烦，所以我想放弃写 C++ 的矩阵库了，而且我的库感觉很难用。我这 Matrix 终于可以用了，可以用于画线了，虽然写得挺糟糕的。</p>\n<p><img src=\"https://raw.githubusercontent.com/iovw/image-storage/master/images/first-line.webp\" alt=\"first line\"></p>\n<p>突然想到我为什么不用 SMID？因为我记得在 DirectX 里 float4 向量，4X4 矩阵什么的都是用的 SMID，然后就找到了乌得勒支大学的高级图形学 Lecture，感觉是个很不错的路标。也许我会用 <code class=\"language-text\">std::experimental::simd</code> 来做这个。反正是魔法，用实验性特性更好？看了半天才发现我要手动从 github 上下载下来，然后用 <code class=\"language-text\">Install.sh</code> 安装.</p>\n<p>然后的话，它的信息也太少了，官方的文档都不全。当然现在我的问题是怎么吧 <code class=\"language-text\">simd_native&lt;float&gt;</code> 类型的数据进行类型转换。看得我心态有点崩，放弃 <code class=\"language-text\">std::simd</code> 了，暂时也放弃使用 SIMD。</p>\n<p>这代码还是写成了我讨厌的样子,不过至少落错有致？</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">line</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int32_t</span> x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int32_t</span> y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int32_t</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int32_t</span> y1<span class=\"token punctuation\">,</span> Mat <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> RGB <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int32_t</span> xx <span class=\"token operator\">=</span> x1 <span class=\"token operator\">-</span> x0<span class=\"token punctuation\">,</span>\n    yy <span class=\"token operator\">=</span> y1 <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> std<span class=\"token operator\">::</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x0 <span class=\"token operator\">></span> x1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">float</span> dy <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  y <span class=\"token operator\">=</span> y0<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> x0<span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> x1<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    y <span class=\"token operator\">+=</span> dy<span class=\"token punctuation\">;</span>\n    x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">></span> y1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">float</span> dx <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  x <span class=\"token operator\">=</span> x0<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> y0<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> y1<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">+=</span> dx<span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为啥和那个版本差了好多，我不懂。这才是我学的那个版本。找到了以前收藏的 cs184, 看到还有视频，本来还挺高兴的，没想到有限制，我看不到。不过好歹看哪几本书，多少页的信息可以作参考, 然后还有他们的项目作业的 Skeleton。就发现他们的第一个作业也不是画直线这种，用的 OpenGL 写一个 SVG 的光栅化器。那我学的图形学是啥？反正和这个 Tiny Renderer 挺像的，从用描点画线开始，然后画三角形，画网格，忘了，最后画的茶壶，用 MFC 的 Timer 搞了个简单的动画。但是我都没学到，走了个过场。（记录中夹杂回忆和跑题？）</p>\n<p>大体上看懂了 <a href=\"https://github.com/ssloy/tinyrenderer/wiki/Lesson-1-Bresenham%E2%80%99s-Line-Drawing-Algorithm\">ssloy 的代码</a>,但是他做的这些所谓的优化都没有说是为什么要这么做?</p>\n<blockquote>\n<p>之前用 Typora 打的一些字不见了?</p>\n</blockquote>\n<p>1-3 是从错误的实现到正确的实现,4-5 是优化.</p>\n<p>对这些优化的我的理解,</p>\n<ul>\n<li>4 用加法替换了循环内的乘法, 提高了几倍的性能. (2.95s -> 0.93s)</li>\n<li>5 用 trick 替换了几个循环里的类型转换. (0.93s -> 0.64s)</li>\n</ul>\n<p>第二次写着已经之前的语气了,只有从记忆里掏出来的一些干巴巴的文字.</p>\n<p>用所给的 <code class=\"language-text\">model.h</code> <code class=\"language-text\">model.cpp</code> 渲染人头时,有点小问题, <code class=\"language-text\">msvc</code> 总是报错 <code class=\"language-text\">vector</code> 访问越界, 但由于对 VS 的不熟悉导致浪费了不少的时间. 用 <code class=\"language-text\">msvc</code> 写 C++ 时, 应该经常会遇到这种断言失败的异常, 但我觉得其实它能帮你提早发现代码的 bug, 而且 debug 也很简单(怎么我之前没发现). 它这里说明得很清楚</p>\n<blockquote>\n<p>Press Retry to debug the application</p>\n</blockquote>\n<p>重试之后可以知道中断到断言的那句代码, 然后根据调用栈找到出错的源头.</p>\n<p>我发现它这个 model 解析和我这里的 Matrix 有不一致的地方,它的 Index 是从 1 开始, 而我的 Matrix 是从 0 开始, 所以... 所以还是我的 Matrix 说了算(谁让你学 <code class=\"language-text\">Matlab</code> 那一套了!).</p>\n<p>不对, 这个 Retry to debug 的功能只有 Debug 模式 (<code class=\"language-text\">F5</code>) 有效, 而 Start Without Debugging (<code class=\"language-text\">Crtl+F5</code>) 并没有效果.</p>\n<p>前面的 model 解析我根本没说到点上,其实是因为坐标转换的问题, 我改成这样就没问题了</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> x0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">.</span>X <span class=\"token operator\">+</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> y0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">+</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> x1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span>X <span class=\"token operator\">+</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> y1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">+</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>obj 文件里的顶点坐标是 [-1,1] 的浮点数,而我需要转换成 [0,w) or [0,h) 的整数. 但是原版,它的范围是 [0, {w,h}].</p>\n<p>渲染?的 4096x4096 的 png 图片足有 48MB, 有些三角形没有闭合,而且是倒着的(总之很多问题).我放一个 512x512 的</p>\n<p><a href=\"https://github.com/iovw/tiny-renderer/tree/5f816afb50acbb77cf0c7249d830b70119c3d689\">关联代码</a></p>\n<p><img src=\"https://raw.githubusercontent.com/iovw/image-storage/master/images/african-head-512x512.webp\" alt=\"african-head-512x512\"></p>\n<p>他的上下翻转操作是在写文件前才做的, 我一番操作还是没有成功,只好看下他的代码了.</p>\n<p>这里又遇到了奇怪的问题,我还挺疑惑 Debug 是 -1024 怎么传到函数里就成了 一个很大的数呢?原来这个函数的参数类似是 <code class=\"language-text\">template &lt;class T&gt;</code> 而 -1024 是 -(1024: u32), 所以这就是隐式类型转换的坑喽~</p>\n<p>成功翻转了,但是还是有这些汗毛一样的线条.好像是我的 <code class=\"language-text\">Line()</code> 的问题. 好难啊!</p>\n<p>把 <code class=\"language-text\">Line()</code> 改成了印象中 ssloy 的样子,一样的 steep, 但是 steep 有处写错了,发了不少时间才发现. @<a href=\"https://github.com/iovw/tiny-renderer/tree/f8c0d4863745883e05398b3dfb60b15e918134d2\">Repo</a></p>\n<p>正确的人头:</p>\n<p><img src=\"https://raw.githubusercontent.com/iovw/image-storage/master/images/african-head-1024-true.webp\" alt=\"true head\"></p>\n<p>待续...</p>\n<p>Links</p>\n<ul>\n<li><a href=\"http://www.libpng.org/pub/png/book/\">PNG The Definitive Guide</a></li>\n<li><a href=\"http://www.linuxfromscratch.org/\">Linux® From Scratch</a></li>\n<li><a href=\"https://github.com/miloyip/svpng\">svpng. miloyip</a></li>\n<li><a href=\"http://www.cs.uu.nl/docs/vakken/magr\">Advanced Graphics</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9B%B7%E6%A3%AE%E6%BC%A2%E5%A7%86%E7%9B%B4%E7%B7%9A%E6%BC%94%E7%AE%97%E6%B3%95\">布雷森汉姆直线算法(Bresenham's line algorithm)</a></li>\n<li><a href=\"https://github.com/cal-cs184\">CS184 Repo</a></li>\n</ul>"}},"pageContext":{"id":"db1bc8f8-94fc-56fe-bb72-e939aadf77c4"}},"staticQueryHashes":[]}