{"componentChunkName":"component---src-components-post-jsx","path":"/post/GalGame 美少女万华镜解包记录","result":{"data":{"markdownRemark":{"id":"ddee91b4-a6bc-5ef5-bbb6-cc8921ae0396","frontmatter":{"date":"March 03, 2020","draft":null,"tags":null,"title":"GalGame 美少女万华镜解包记录"},"html":"<h3>一篇可能没什么帮助的美少女万华镜 4 解包记录</h3>\n<p>一开始，只知道搜索 [Galgame, unpack, 美少女万华镜, 解包] -></p>\n<p>通过 ZTJ 的 GalGame 解包记录，了解到 asmodean 的 exfp3 可以解包这个游戏，然而这个 exfp3， 提供了三个版本，每个版本只有需要的参数不一样，我以为需要 keyfile -></p>\n<p>用 Resource Hacker 打开游戏执行文件，提取了里面的 RESKEY.bin, 但是还是没能成功用 exfp3 解包，执行过程没有输出？我开始尝试编译提供的代码，发现少了一部分，并不能编译成功。-></p>\n<p>lennylxx 的 as-util.h 缺少了一些函数</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">&#39;get_file_prefix&#39;: is not a member of &#39;as&#39;\n&#39;stringf&#39;: is not a member of &#39;as&#39;\n&#39;guess_file_extension&#39;: is not a member of &#39;as&#39; //这怎么猜？</code></pre></div>\n<p>我觉得自己写，先让 <code class=\"language-text\">guess_file_extension</code> 都返回 <code class=\"language-text\">${file.basename}.guess</code></p>\n<p>缺少的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">string as<span class=\"token operator\">::</span><span class=\"token function\">get_file_prefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstring as<span class=\"token operator\">::</span><span class=\"token function\">stringf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstring <span class=\"token function\">guess_file_extension</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">get_file_size</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>第二部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>第二部分是是 <code class=\"language-text\">io.h</code> 和 <code class=\"language-text\">direct.h</code> 里的函数，据说是 posix API, 在 windows 上也有</p>\n<p>然后函数都返回默认值，成功跑了起来,只是输出乱码。</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">        game index = 0 -&gt; JK�ƈ��s���t2�`�s���d�ԕҁ`\n        game index = 1 -&gt; Soul Link ULTIMATE\n        game index = 2 -&gt; JK�ƈ��s���t3�`�����������ҁ`\n        game index = 3 -&gt; �H��ɕ����R���t�F�e�B\n        game index = 4 -&gt; JK�ƈ��s���t4�`�Ȃ܂������f�������ҁ`\n        game index = 5 -&gt; �Ȍ���`�����̃��C�t�Ɖ��̉Ł`\n        game index = 6 -&gt; JK�ƈ��s���t5�`�؋�o���ҁ`\n        game index = 7 -&gt; JK�ƈ��s���t6�`���u���u�J�b�v���Q���ҁ`\n        game index = 8 -&gt; JK�ƈ��s���tSP�`�n�鐢�Ԃ̓G�����t�΂���`\n        game index = 9 -&gt; ���u���L�X\n        game index = 10 -&gt; JK�ƃG�����[�}���`����Â��qJK����u�z�ɘA�ꍞ��Ń�����������`\n        game index = 11 -&gt; JK�ƃG���R���r�j�X���`�A���o�C�g���̎�݂�����ă�����������`\n        game index = 12 -&gt; �����L���[�����}���c�F\n        game index = 13 -&gt; �p�p���u�`�p�p�ƃC�`���G�����������B�ƈ�����̉��Ł`\n        game index = 14 -&gt; ���̕s�v�c�̏I���Ƃ�\n        game index = 15 -&gt; ���������؋�\n        game index = 16 -&gt; JK�ƃG���c���Z���Z�C�`���Ƃ̂���lJK����l�ɂ��ă�����������`</code></pre></div>\n<p>原始代码文件是 eucjp 编码的，转换成了 utf8,解决乱码问题，完成了缺少的函数，但是程序的运行还是有问题</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> toc_buff <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>toc_len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> trl<span class=\"token punctuation\">.</span>toc_offset<span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> toc_buff<span class=\"token punctuation\">,</span> toc_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> toc_buff<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> filename_len <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>把 p 从 <code class=\"language-text\">char*</code> 类型转换成 <code class=\"language-text\">unsigned short*</code> 有什么意义吗？删掉这个类型转换工作正常，好像？</p>\n<p>很糟糕，访问越界了，在 <code class=\"language-text\">crc_or_something</code> 这里, 我能有什么办法呢？不过至少知道了 <code class=\"language-text\">FilePackVer3.1</code> 这个字符串？-></p>\n<p>hz86 的 filepack, 然而我没有尝试这一个</p>\n<blockquote>\n<p>代码更工整一些，但是解密部分不像手写的。我好想知道怎么反编译这种程序获得想要的东西啊！</p>\n</blockquote>\n<p>-></p>\n<p>找到几个支持多种格式的工具(arc_unpacker, GARbro)，暂且先达成目的再考虑别的吧。</p>\n<p>在 arc_unpacker 说明页面发现它是支持 qlie 的</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">qlie/pack: added automatic searching for game keys\nqlie/pack: improved .exe key retrieval</code></pre></div>\n<p>但是因为未知原因, 不能识别出来，尝试手动指定 format, 也失败了。-></p>\n<p>用 GARbro 可以直接打开 .pack， 但是提取速度很慢，别人 arc_unpacker 都可以多线程提取！</p>\n<p>还有就是 GARbro 的游览器界面是可以查看图片的，但是提取出来的 png 不能正常打开。</p>\n<ul>\n<li>data4 立绘</li>\n<li>data5 效果音</li>\n<li>data6 脚本</li>\n<li>data7 更多脚本</li>\n<li>data8 脚本+一张立绘？</li>\n<li>data3 像是 CG 的图？每帧都有</li>\n<li>data2 角色的配音？</li>\n<li>data1 背景音乐+一个 movie?</li>\n<li>data0 脚本+配置？</li>\n</ul>\n<p>GARbro 的提取选项里只要不选保持原样都可以正常打开。</p>\n<p>3/5 更新：</p>\n<p>GARbro 提取的原始格式的 png 文件不能直接打开，用 2/16 进制编辑器打开后，头部有</p>\n<div class=\"gatsby-highlight\" data-language=\"hex\"><pre class=\"language-hex\"><code class=\"language-hex\">DPNG\u0001   \b    \u0005  �\u0002           \u0005  X   0t\u0002\n......\n\\x89PNG IHDR</code></pre></div>\n<p>打开正常的 png 文件，头部是</p>\n<div class=\"gatsby-highlight\" data-language=\"hex\"><pre class=\"language-hex\"><code class=\"language-hex\">\\x89 P N G \\x0d \\x0a \\x1a \\x0a</code></pre></div>\n<p>把 <code class=\"language-text\">\\x89PNG</code> 之前的删除就是正常的 png 文件了。</p>\n<p>写一个脚本来自动处理:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> argparse\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_file</span><span class=\"token punctuation\">(</span>inp_path<span class=\"token punctuation\">,</span> out_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>inp_path<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> inp<span class=\"token punctuation\">:</span>\n        inp<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>out_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> out<span class=\"token punctuation\">:</span>\n            out<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>inp<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"Convert DPNG format file to normal png file\"\"\"</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"Full path to the input directory.\"</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">.</span>cwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"Full path to the output directory. \"</span>\n                             <span class=\"token string\">\"It would be a script parent directory if not specified.\"</span><span class=\"token punctuation\">)</span>\n\n    args <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    in_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\n    out_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> in_dir<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'*.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'convert </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        convert_file<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> out_dir<span class=\"token punctuation\">.</span>joinpath<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>但是太慢了，我有多个线程可用，但是只能用一个线程来处理，真是浪费呢。</p>\n<p>用 timeit 测试了一下，处理 100 个 png 平均需要 0.19 s, 一秒钟 500 ？好像也不算慢了。</p>\n<p>但是 ev 里有 700+的文件，跑了 34.8682508 s，难道我选的 100 张都是最小的那种？</p>\n<p>改成随机选好了。然而，随机选择的 100 个文件也是 0.19+ s，200 个是大约 0.5s</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">2020-03-05 16:08:33,649 - process 100 file time: 0.1718941\n2020-03-05 16:08:33,983 - process 200 file time: 0.34112460000000006\n2020-03-05 16:08:34,470 - process 300 file time: 0.48815339999999996\n2020-03-05 16:08:35,509 - process 400 file time: 1.0346279999999999\n2020-03-05 16:08:36,926 - process 500 file time: 1.4165533999999997\n2020-03-05 16:08:38,756 - process 600 file time: 1.8242625000000006\n2020-03-05 16:08:40,569 - process 700 file time: 1.8237256000000004\n2020-03-05 16:08:42,781 - process 701 files completed, duration: 2.2004572000000007</code></pre></div>\n<p>改了下之后像是正常了？</p>\n<p>8 workers 的线程池</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">2020-03-05 16:07:28,215 - process 100 file time: 0.004936099999999999\n2020-03-05 16:07:28,215 - process 200 file time: 0.00488559999999999\n2020-03-05 16:07:28,231 - process 300 file time: 0.0058112999999999915\n2020-03-05 16:07:28,246 - process 400 file time: 0.006451200000000018\n2020-03-05 16:07:28,246 - process 500 file time: 0.007458199999999998\n2020-03-05 16:07:28,262 - process 600 file time: 0.008884200000000009\n2020-03-05 16:07:28,278 - process 700 file time: 0.00949259999999999\n2020-03-05 16:07:28,293 - process 701 files completed, duration: 0.009794200000000003</code></pre></div>\n<p>效果显著！</p>\n<p>不对，我的多线程程序没有执行完成就退出了，才发现输出目录没有东西。</p>\n<p>传的参数不对，但已经是我尝试过 N 种错误的方法后了，然后就是 timeit 好像测不出来执行时间，</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">beg <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nexecutor<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>convert_file<span class=\"token punctuation\">,</span> in_files<span class=\"token punctuation\">)</span>\nduration <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> beg</code></pre></div>\n<p>用这种朴实的方法也不行，明显感觉到在输出最后一句后还执行了一段时间。</p>\n<p>用 idea 的 profile 工具可以测得处理 701 个文件的时间是 1067 ms，算是还可以吧。</p>\n<p>然后的话，需要把所有的不完整的图片合并完整。先用 GIMP 看看怎么摆？（虽然 ps 更专业，但是越来越难下载了）</p>\n<p>唉，这拼图好难啊，我还以为顺序有用的。让我看下答案。</p>\n<p>然后我发现，GARbro 的每个文件都是一整张图，而我这里只有一部分？</p>\n<p>然后把文件读进来，查找 png 的文件头：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">In <span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">rb'\\x89PNG'</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span>\nOut<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">b'\\x89PNG'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">b'\\x89PNG'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">b'\\x89PNG'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">b'\\x89PNG'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">b'\\x89PNG'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">b'\\x89PNG'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">b'\\x89PNG'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">b'\\x89PNG'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>所以之前我只把第一部分取出来了，其实一共有 8 个切片。真是糟糕的设计！</p>\n<p>想换个语言玩了。不如 C# 或者 kotlin ?</p>\n<p>算了咱还是快点完成吧，还有很多事情呢。</p>\n<p>看到 PNG 的 Specification 文档真是让人望而生畏啊，太长了。</p>\n<p>真的，无心看这个 png 规范了，除非我需要写一个 png viewer。</p>\n<p>感觉翻 GARbro 的代码反而更简单。但是用 VS 连成功编译代码都做不到。</p>\n<p>如果说不能编译的原因话，就是依赖的奇怪问题。比如 一个文件 <code class=\"language-text\">using System.Linq</code> 但 VS 显示 <code class=\"language-text\">未能找到引用的组件&quot;System.Linq&quot;</code> 然后 <code class=\"language-text\">using</code> 这句也是红的。太难了。CS 领域就是这样，用的操作系统肯定是有 bug，IDE 有 bug，PL 也有 bug，就看什么时候遇到了。</p>\n<p>但这常常让我心情很糟。好像找到原因了，它这里引用的 dll 都是这样的</p>\n<p><img src=\"https://raw.githubusercontent.com/iovw/image-storage/master/images/e36f367b600d3b8a568667f60bbeef3356b0fa7d459aa7fd12ab15024b084b72.webp\" alt=\"invalid dll reference\"></p>\n<p>正常的是这些</p>\n<p><img src=\"https://raw.githubusercontent.com/iovw/image-storage/master/images/a864f2cafec671ff0d8e3db98cbf62ebfaaf8bb1bc49eb62b8e107ccb1a6aa7b.webp\" alt=\"true dll reference\"></p>\n<p>根据自觉，咱在 {project}.csproj 里找到了重要信息</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PreBuildEvent</span><span class=\"token punctuation\">></span></span>perl \"$(SolutionDir)inc-revision.pl\" \"$(ProjectPath)\" $(ConfigurationName)\nexit 0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PreBuildEvent</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(SolutionDir)\\.nuget\\NuGet.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Exists(<span class=\"token punctuation\">'</span>$(SolutionDir)\\.nuget\\NuGet.targets<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>EnsureNuGetPackageBuildImports<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">BeforeTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PrepareForBuild<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ErrorText</span><span class=\"token punctuation\">></span></span>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ErrorText</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Error</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>!Exists(<span class=\"token punctuation\">'</span>$(SolutionDir)\\.nuget\\NuGet.targets<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$([System.String]::Format(<span class=\"token punctuation\">'</span>$(ErrorText)<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>$(SolutionDir)\\.nuget\\NuGet.targets<span class=\"token punctuation\">'</span>))<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>是原作者写的一个 perl 脚本，但是在我这里不能运行，它是操作 git 的。所以把这段代码注释，项目就正常了。每个被以来的项目都需要这样操作。（其实不懂为啥不用 cmd 脚本，更简单不是吗？）</p>\n<p>而且作者根本没在 ReadMe 里讲怎么 build 这个项目？</p>\n<p>接下来，错误改变了，<strong>找不到清单签名证书</strong>。应该好解决。</p>\n<p>成功编译运行，奇怪的知识增加了。</p>\n<p>找到的关键部分的代码，期间困难重重，我得克服不改那些红色波浪线的冲动，去一个函数一个函数的往下跳，</p>\n<p>而且看到这部分代码，很感动，因为一开始就找到了这里，只是不太明白，经过这么个过程，大致明白了程序的一部分逻辑后，更明白了？接下来就需要把这部分 CSharp 代码复刻到 Python 了。</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">ImageMetaData</span> <span class=\"token function\">ReadMetaData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IBinaryStream</span> file<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    file<span class=\"token punctuation\">.</span>Position <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tileCount <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tileCount <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> metaData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DpngMetaData</span>\n    <span class=\"token punctuation\">{</span>\n        BPP <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span>\n        TileCount <span class=\"token operator\">=</span> tileCount<span class=\"token punctuation\">,</span>\n        Width <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">ReadUInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        Height <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">ReadUInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> metaData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">ImageData</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IBinaryStream</span> stream<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ImageMetaData</span> metaData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DpngMetaData<span class=\"token punctuation\">)</span> metaData<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bitmap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WriteableBitmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> metaData<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> metaData<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">,</span>\n        ImageData<span class=\"token punctuation\">.</span>DefaultDpiX<span class=\"token punctuation\">,</span> ImageData<span class=\"token punctuation\">.</span>DefaultDpiY<span class=\"token punctuation\">,</span>\n        PixelFormats<span class=\"token punctuation\">.</span>Pbgra32<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> next_tile <span class=\"token operator\">=</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> meta<span class=\"token punctuation\">.</span>TileCount<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        stream<span class=\"token punctuation\">.</span>Position <span class=\"token operator\">=</span> next_tile<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> x <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> y <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> width <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> height <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> size <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">ReadUInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stream<span class=\"token punctuation\">.</span><span class=\"token function\">Seek</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> SeekOrigin<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        next_tile <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span>Position <span class=\"token operator\">+</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> streamRegion <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamRegion</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">.</span>AsStream<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">.</span>Position<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PngBitmapDecoder</span><span class=\"token punctuation\">(</span>streamRegion<span class=\"token punctuation\">,</span>\n                BitmapCreateOptions<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span> BitmapCacheOption<span class=\"token punctuation\">.</span>OnLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FormatConvertedBitmap</span><span class=\"token punctuation\">(</span>decoder<span class=\"token punctuation\">.</span>Frames<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> PixelFormats<span class=\"token punctuation\">.</span>Pbgra32<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stride <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>PixelWidth <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pixels <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span>stride <span class=\"token operator\">*</span> frame<span class=\"token punctuation\">.</span>PixelHeight<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            frame<span class=\"token punctuation\">.</span><span class=\"token function\">CopyPixels</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Int32Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">.</span>PixelWidth<span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">.</span>PixelHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">WritePixels</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> pixels<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ImageData</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> metaData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我想要不要直接去改 GARbro 了，它支持的格式很多，我只需要加一个多线程或者异步的导出功能就好了？虽然原作者好像不活跃了，但是程序本身不是很复杂，没有什么困难的算法？</p>\n<p>一开始是用的 pillow, 一般的操作还是没问题，而且还有 <code class=\"language-text\">Image.frombytes</code> 这样的接口，但是和我想的不一样，我这种包含元数据的<code class=\"language-text\">png</code>原始字节流好像并不支持？</p>\n<p>原来可以把 <code class=\"language-text\">bytes</code> 转成 <code class=\"language-text\">BytesIO</code> 可以当成文件打开？(file like object)</p>\n<p>看来 pillow 还是不太行，不能操作 ROI (Region of Interest), 而这可是 opencv 的基础操作？不过我优点还是小吧，手动操作也不是不行，就是觉得会很慢。</p>\n<p>看来不太行，换用 cv 了。太糟糕了。开始怀念 matlab 的图像操作了。</p>\n<p>cv 由于只是一个 c++ 库的 python 绑定，错误信息根本看不到，只能看到 <code class=\"language-text\">SystemError: &lt;built-in function imwrite&gt; returned NULL without setting an error</code>, 很难 debug。</p>\n<p>好了，我已经开始改 GARbro 了，先是用 reshaper 把所有代码的难看的红色波浪线干掉（才发现可以直接干掉一整个项目/解决方案，不过很慢就是了，期间我甚至下完了一个不小的游戏？）</p>\n<p>找到了我要改的代码，但是感觉无从下手，它有这样一个函数 <code class=\"language-text\">ExtractFilesFromArchive</code> 但是这些 extract 的操作都是在那个进度条控件的 <code class=\"language-text\">doWork</code> 里，然而 C# 的 <code class=\"language-text\">ThreadPool</code> 好像只有发送任务的接口，任务完成后不知道怎么获得反馈，这样和进度条不能协同工作啊！</p>\n<p>难难难！头秃。</p>\n<p>这种 WPF 的应用，事件绑定好像是一般都在 XAML 文件里？刚又忘了，在 .cs 里找半天，不过更好的方法应该是用 IDE 的查找方法调用功能吧？</p>\n<p>很想放弃了。试了下 async 就发现它的缺点，这个项目代码太多， async 又必须更改函数的接口，改一个地方就得改所有地方。</p>\n<p>真的放弃了。</p>\n<p>最后再在 Python 那条路上挣扎一下。（主要是 Python 连阻塞式的单线程的处理现在都不能实现）</p>\n<p>好了，我的 Python 代码成功了，经过大概十多次错误之后。</p>\n<p>过程大概就是用 numpy 生成一个随机数据的矩阵，用 imread 竟然可以成功保存？</p>\n<p>然后控制变量，比如大小，数据类型，数据应该是无关的，最后发现唯一不同只是我传了一个 <code class=\"language-text\">libpath.Path</code> 到 path 里，而对照组是 <code class=\"language-text\">str</code> ？至此，Python 这条路应该是没有问题了。</p>\n<p>顺序执行用了 58.854 s， 而并发执行的版本不太正常，700 张图只输出了不到 100 张？日志里倒是说都完成了.</p>\n<p>莫名其妙的好了？14.150 s 11.617 s (把设的 8 个 worker，删了，发现默认是 <code class=\"language-text\">min(32, (os.cpu_count() or 1) + 4)</code> 感觉直接默认值会更好？</p>\n<p>又解决一个小问题，有俩很恐怖的图(<code class=\"language-text\">c_笑う夕摩_01.png</code>)，不是 RGBA 的 png，矩阵的形状不一样了？</p>\n<p>而且还不能广播(broadcast)？所以咱统一转成 RGBA。</p>\n<p>这个章节就暂时这样吧，现在做了</p>\n<ul>\n<li>一个用一系列图片生成 gif 动画的脚本</li>\n<li>一个把 dpng 这种专有憨憨格式转成通用的 png 的脚本。</li>\n</ul>\n<p>然而从 .pack 中提取文件的功能还是用的 GARbro。（而且它也支持直接转换 dpng 到 png）</p>\n<p>没什么成果，踩了很多坑。</p>\n<p>Links:</p>\n<ul>\n<li><a href=\"https://blog.ztjal.info/acg/acg-data/galgame-unpack-record-2011-4th\">ZTJ 的 GalGame 解包记录</a></li>\n<li><a href=\"http://asmodean.reverse.net/pages/exfp3.html\">asmodean 的 exfp3</a></li>\n<li><a href=\"http://www.angusj.com/resourcehacker\">Resource Hacker</a></li>\n<li><a href=\"https://raw.githubusercontent.com/lennylxx/pksgnpa/master/as-util.h\">lennylxx 的 as-util.h</a></li>\n<li><a href=\"https://github.com/Inori/FuckGalEngine/blob/master/Minori/Minori/fuckpaz/as-util.h\">Inori 的 as-util.h</a></li>\n<li><a href=\"https://github.com/hz86/filepack/blob/master/filepack31.c\">hz86 的 filepack</a></li>\n<li><a href=\"https://zenhax.com/viewtopic.php?t=8115\">PC ero game .pack archive</a></li>\n<li><a href=\"https://github.com/vn-tools/arc_unpacker\">arc_unpacker</a></li>\n<li><a href=\"https://github.com/morkt/GARbro\">GARbro</a></li>\n<li><a href=\"https://sudonull.com/post/9841-Qlie-visual-story-engine-disassembly\">Qlie visual story engine disassembly</a></li>\n<li><a href=\"https://www.w3.org/TR/PNG\">Portable Network Graphics (PNG) Specification (Second Edition)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Portable_Network_Graphics\">Portable Network Graphics</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl?redirectedfrom=MSDN\">Dotnet Task Parallel Library</a></li>\n</ul>"}},"pageContext":{"id":"ddee91b4-a6bc-5ef5-bbb6-cc8921ae0396"}},"staticQueryHashes":[]}